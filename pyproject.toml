[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "templatebot"
description = "Templatebot is a Squarebot backend for creating files and repositories from templates."
license = "MIT"
license-files = [ "LICENSE" ]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Private :: Do Not Upload",
    "Typing :: Typed",
]
requires-python = ">=3.12"
# Use requirements/main.in for runtime dependencies instead.
dependencies = [
    "fastapi",
    "uvicorn[standard]>=0.34",
    "pydantic",
    "pydantic-settings",
    "safir[redis]>=5",
    "faststream[kafka]",
    "rubin-squarebot>=0.10.0",
    "templatekit",
    "cookiecutter<2.2",  # match templates repo
    "GitPython",
    "cachetools",
    "gidgethub",
    "pylatexenc",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/lsst-sqre/templatebot"
Source = "https://github.com/lsst-sqre/templatebot"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "asgi-lifespan",
    "coverage[toml]",
    "httpx",
    "pydantic",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]
lint = [
    "pre-commit",
    "pre-commit-uv",
    "ruff>=0.12",
]
typing = [
    "mypy",
    "types-PyYAML"
]
nox = [
    "nox",
    "nox-uv",
    "testcontainers[kafka]>=4.10.0",
]

[tool.setuptools_scm]

[tool.coverage.run]
parallel = true
branch = true
source = ["templatebot"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
extend = "ruff-shared.toml"
extend-exclude = ["original/**"]

[tool.ruff.lint.extend-per-file-ignores]
"noxfile.py" = [
    "D100",  # No docstring for module
]

[tool.ruff.lint.isort]
known-first-party = ["templatebot", "tests"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"
